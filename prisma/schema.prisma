// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Star {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String   @db.VarChar(255)
    constellation String   @db.VarChar(255)
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token_expires_in Int?
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum SENDER {
    USER
    INTERVIEWER
}

model MessageMetadata {
    id           String    @id @default(cuid())
    satisfaction Int
    feedback     String
    Message      Message[]
}

model Message {
    id                String           @id @default(cuid())
    content           String           @db.Text
    sender            SENDER
    metadata          MessageMetadata? @relation(fields: [messageMetadataId], references: [id])
    interview         Interview        @relation(fields: [interviewId], references: [id], onDelete: Cascade)
    interviewId       String
    messageMetadataId String?
}

enum InterviewStatus {
    COMPLETED
    ACTIVE
}

model Industry {
    id                       String                   @id @default(cuid())
    name                     String
    topics                   Topic[]
    interviewConfigurationId String?
    InterviewConfiguration   InterviewConfiguration[]
}

model Topic {
    id                     String                   @id @default(cuid())
    name                   String
    InterviewConfiguration InterviewConfiguration[]
    Industry               Industry?                @relation(fields: [industryId], references: [id])
    industryId             String?
}

model InterviewConfiguration {
    id                String      @id @default(cuid())
    yearsOfExperience Int
    durationInMinutes Int         @default(15)
    topics            Topic[]
    industry          Industry    @relation(fields: [industryId], references: [id])
    Interview         Interview[]
    industryId        String
}

model Interview {
    id                  String                 @id @default(cuid())
    messages            Message[]
    overallSatisfaction Int?
    status              InterviewStatus
    configuration       InterviewConfiguration @relation(fields: [configurationId], references: [id])
    configurationId     String
    User                User?                  @relation(fields: [userId], references: [id])
    userId              String?
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    interviews    Interview[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
