// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Star {
    id            Int      @id @default(autoincrement())
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    name          String   @db.VarChar(255)
    constellation String   @db.VarChar(255)
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum SENDER {
    USER
    INTERVIEWER
}

model MessageMetadata {
    id                             String    @id @default(cuid())
    Message                        Message[]
    question                       String?
    understandingOfConcept         String    @db.Text
    technicalAccuracy              String    @db.Text
    realWorldExample               String    @db.Text
    explanationAndCommunication    String    @db.Text
    suggestionsForImprovement      Json //string[]
    furtherLearningRecommendations Json //string[]
    softSkills                     String    @db.Text
}

enum InterviewPhase {
    INTRODUCTION
    SOFT_SKILLS
    TECHNICAL
    END
}

model Message {
    id                String           @id @default(cuid())
    content           String           @db.Text
    isQuestion        Boolean?         @default(false)
    sender            SENDER
    metadata          MessageMetadata? @relation(fields: [messageMetadataId], references: [id])
    interview         Interview        @relation(fields: [interviewId], references: [id], onDelete: Cascade)
    interviewId       String
    messageMetadataId String?
}

enum InterviewStatus {
    COMPLETED
    ACTIVE
}

model Industry {
    id                       String                   @id @default(cuid())
    name                     String
    topics                   Topic[]
    interviewConfigurationId String?
    InterviewConfiguration   InterviewConfiguration[]
}

model Topic {
    id                     String                   @id @default(cuid())
    name                   String
    InterviewConfiguration InterviewConfiguration[]
    Industry               Industry?                @relation(fields: [industryId], references: [id])
    industryId             String?
    InterviewResultUnit    InterviewResultUnit?     @relation(fields: [interviewResultUnitId], references: [id])
    interviewResultUnitId  String?
}

model InterviewConfiguration {
    id                String      @id @default(cuid())
    yearsOfExperience Int
    numberOfQuestions Int         @default(10)
    topics            Topic[]
    industry          Industry    @relation(fields: [industryId], references: [id])
    Interview         Interview[]
    industryId        String
}

model Interview {
    id                String                 @id @default(cuid())
    createdAt         DateTime               @default(now())
    updatedAt         DateTime               @updatedAt
    messages          Message[]
    status            InterviewStatus
    configuration     InterviewConfiguration @relation(fields: [configurationId], references: [id])
    configurationId   String
    userId            String
    title             String?
    questions         Json //string[]
    interviewResult   InterviewResult?       @relation(fields: [interviewResultId], references: [id])
    interviewResultId String?                @unique
    User              User                   @relation(fields: [userId], references: [id])
}

model InterviewResult {
    id                  String                @id @default(cuid())
    units               InterviewResultUnit[]
    overallSatisfaction Int?
    interview           Interview?
}

model InterviewResultUnit {
    id                             String           @id @default(cuid())
    question                       String           @db.Text
    answer                         String           @db.Text
    relevantTopics                 Topic[]
    InterviewResult                InterviewResult? @relation(fields: [interviewResultId], references: [id])
    interviewResultId              String?
    understandingOfConcept         String           @db.Text
    technicalAccuracy              String           @db.Text
    realWorldExample               String           @db.Text
    explanationAndCommunication    String           @db.Text
    suggestionsForImprovement      Json //string[]
    furtherLearningRecommendations Json //string[]
    softSkills                     String           @db.Text
}

model User {
    id                         String      @id @default(cuid())
    firstName                  String?
    lastName                   String?
    username                   String?
    email                      String?     @unique
    emailVerified              DateTime?
    image                      String?
    numberOfQuestionsAvailable Int         @default(10)
    interviews                 Interview[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Log {
    id        String   @id @default(cuid())
    timestamp DateTime @default(now())
    body      Json
    message   String?
}
